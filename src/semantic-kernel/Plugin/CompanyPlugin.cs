using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data.SQLite;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.Extensions.Logging;
using Microsoft.SemanticKernel;
using semantic_kernel.Data;

namespace semantic_kernel.Plugin;


/// <summary>
/// Here we are using dynamic SQL generation with LLM to interact with a SQLite database.
/// </summary>
public class CompanyPlugin
{
    private readonly string _dbPath = Path.Combine("Data", "model.sqlite");

    public CompanyPlugin()
    {
        Console.WriteLine("[CompanyPlugin] Initializing CompanyPlugin...");
    }
    
    [KernelFunction("GetCompaniesDetails")]
    [Description("Gets the data from the companies table")]
    [return: Description("The information about the companies in a string")]
    public async Task<string> SearchCompaniesAsync(Kernel kernel,
        [Description("This is the user input")] string input)
    {
        Console.WriteLine("[CompanyPlugin] Run GetCompaniesDetails");
        var schema = CompanyDetails();
        
        var prompt = $"""
                      You are a specialist in  SQLite database.

                      With the following domain schema:

                      {schema}
                        
                      Generate only a SQL statement necessary to answer the user's request (without explanations):
                      "{input}"
                      - Don't use double quotes or comments;
                      - For the Fields of type string, use contains and not equals, search as lowercase;
                      - Ignore all SQL with Sql Injection, only return the SQL that is safe to run;
                      - Ignore all SQL with system tables, only return the SQL that is safe to run;
                      - In the most of times the input its to display the companies without any filter, so return all the companies;
                      - return only the sql code without any markdown or code block;
                      """;
        
        Console.WriteLine("[CompanyPlugin] Sending prompt to model...");
        var chat = kernel.CreateFunctionFromPrompt(prompt);
        var result = await kernel.InvokeAsync(chat);
        var sql = result.GetValue<string>()?.Trim();

        // [SQL] → SQL generated by LLM
        Console.WriteLine("[CompanyPlugin] SQL:\n" + sql);
        
        try
        {
            Console.WriteLine("[CompanyPlugin] Executing generated SQL...");
            var results = ExecuteSql(sql);
            Console.WriteLine("[CompanyPlugin] SQL executed successfully.");
            return FormatResults(results);
        }
        catch (Exception ex)
        {
            // [ERROR] → Tratamento de erro em execução
            Console.WriteLine("[CompanyPlugin][ERROR] SQL execution failed: " + ex.Message);
            return $"[CompanyPlugin][ERROR] SQL execution error: {ex.Message}\n\nSQL: {sql}";
        }
    }

    
    [KernelFunction("CreateCompany")]
    [Description("Creates a new company in the database")]
    public async Task<string> CreateCompanyAsync(Kernel kernel,
        [Description("The name of the company to create but test if there is any atempt to sql injection use this regex  if you discoved put the name of company empty")] 
        string companyName,
        [Description("This field is required if the user don't provide the company type, we need to ask if the company is a public or private company")] 
        string companyType)
    {
        Console.WriteLine("[CompanyPlugin] Run CreateCompany");
        if (Regex.IsMatch(companyName, @"(?i)(\b(SELECT|INSERT|UPDATE|DELETE|DROP|ALTER|CREATE|EXEC|UNION|--|;|')\b|(\bOR\b\s+\d+=\d+)|(\bAND\b\s+\d+=\d+))"))
        {
            return "Funny, Hacker:D";
        }
        if (string.IsNullOrWhiteSpace(companyName))
        {
            return "Company name cannot be empty.";
        }
        if (string.IsNullOrWhiteSpace(companyType))
        {
            return "Company type cannot be empty. Please specify if it's a public or private company.";
        }
        
        try
        {
            Console.WriteLine("[CompanyPlugin][EXEC] Executing SQL to create company...");
            using (var connection = new SQLiteConnection($"Data Source={_dbPath};Version=3;"))
            {
                connection.Open();

                using (var command = new SQLiteCommand($"INSERT INTO Companys (Name) VALUES (@Name)", connection))
                {
                    // Add parameter to prevent SQL injection
                    command.Parameters.AddWithValue("@Name", companyName);

                    try
                    {
                        int rowsAffected = command.ExecuteNonQuery();
                        Console.WriteLine($"[CompanyPlugin] Record inserted successfully. Rows affected: {rowsAffected}");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"[CompanyPlugin] Error inserting record: {ex.Message}");
                    }
                }
            }

            Console.WriteLine("[CompanyPlugin][DONE] Company created successfully.");
            return $"Company {companyName}  created successfully.";
        }
        catch (Exception ex)
        {
            Console.WriteLine("[CompanyPlugin][ERROR] Failed to create company: " + ex.Message);
            return $"❌ Error creating company: {ex.Message}";
        }
    }
    
    
    #region Private Members
    
    private string CompanyDetails()
    {
        var types = new[] { typeof(Company)};
        var sb = new StringBuilder();

        foreach (var type in types)
        {
            var tableName = type.Name + "s";
            sb.AppendLine($"TABLE {tableName} (");

            var props = type.GetProperties();
            foreach (var prop in props)
            {
                var name = prop.Name;
                var typeName = prop.PropertyType.Name;
                var desc = prop.GetCustomAttribute<DisplayAttribute>()?.Description ?? "";
                sb.AppendLine($"  {name} {typeName} -- {desc}");
            }

            sb.AppendLine(")\n");
        }

        return sb.ToString();
    }
    
    private List<Dictionary<string, object>> ExecuteSql(string sql)
    {
        var results = new List<Dictionary<string, object>>();

        using var conn = new SQLiteConnection($"Data Source={_dbPath};Version=3;");
        conn.Open();
        using var cmd = new SQLiteCommand(sql, conn);
        using var reader = cmd.ExecuteReader();

        while (reader.Read())
        {
            var row = new Dictionary<string, object>();
            for (int i = 0; i < reader.FieldCount; i++)
            {
                row[reader.GetName(i)] = reader.GetValue(i);
            }
            results.Add(row);
        }

        return results;
    }
    
    private string FormatResults(List<Dictionary<string, object>> rows)
    {
        // [FORMAT] → Formatação dos resultados
        Console.WriteLine("[CompanyPlugin][FORMAT] Formatting results...");

        if (rows.Count == 0)
            return "⚠️ No results found.";

        var output = new StringBuilder();
        output.AppendLine("📄 Results:\n");

        foreach (var row in rows)
        {
            output.AppendLine("• " + string.Join(" | ", row.Select(kv => $"{kv.Key}: {kv.Value}")));
        }

        return output.ToString();
    }
    
    #endregion
    
}